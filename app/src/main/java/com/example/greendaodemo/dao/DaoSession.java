package com.example.greendaodemo.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.example.greendaodemo.bean.Card1;
import com.example.greendaodemo.bean.Card2;
import com.example.greendaodemo.bean.EventBean;
import com.example.greendaodemo.bean.HangupBean;
import com.example.greendaodemo.bean.Orders;
import com.example.greendaodemo.bean.RemoteZipBean;
import com.example.greendaodemo.bean.StudentBean;
import com.example.greendaodemo.bean.User1;
import com.example.greendaodemo.bean.User2;
import com.example.greendaodemo.bean.User3;

import com.example.greendaodemo.dao.Card1Dao;
import com.example.greendaodemo.dao.Card2Dao;
import com.example.greendaodemo.dao.EventBeanDao;
import com.example.greendaodemo.dao.HangupBeanDao;
import com.example.greendaodemo.dao.OrdersDao;
import com.example.greendaodemo.dao.RemoteZipBeanDao;
import com.example.greendaodemo.dao.StudentBeanDao;
import com.example.greendaodemo.dao.User1Dao;
import com.example.greendaodemo.dao.User2Dao;
import com.example.greendaodemo.dao.User3Dao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig card1DaoConfig;
    private final DaoConfig card2DaoConfig;
    private final DaoConfig eventBeanDaoConfig;
    private final DaoConfig hangupBeanDaoConfig;
    private final DaoConfig ordersDaoConfig;
    private final DaoConfig remoteZipBeanDaoConfig;
    private final DaoConfig studentBeanDaoConfig;
    private final DaoConfig user1DaoConfig;
    private final DaoConfig user2DaoConfig;
    private final DaoConfig user3DaoConfig;

    private final Card1Dao card1Dao;
    private final Card2Dao card2Dao;
    private final EventBeanDao eventBeanDao;
    private final HangupBeanDao hangupBeanDao;
    private final OrdersDao ordersDao;
    private final RemoteZipBeanDao remoteZipBeanDao;
    private final StudentBeanDao studentBeanDao;
    private final User1Dao user1Dao;
    private final User2Dao user2Dao;
    private final User3Dao user3Dao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        card1DaoConfig = daoConfigMap.get(Card1Dao.class).clone();
        card1DaoConfig.initIdentityScope(type);

        card2DaoConfig = daoConfigMap.get(Card2Dao.class).clone();
        card2DaoConfig.initIdentityScope(type);

        eventBeanDaoConfig = daoConfigMap.get(EventBeanDao.class).clone();
        eventBeanDaoConfig.initIdentityScope(type);

        hangupBeanDaoConfig = daoConfigMap.get(HangupBeanDao.class).clone();
        hangupBeanDaoConfig.initIdentityScope(type);

        ordersDaoConfig = daoConfigMap.get(OrdersDao.class).clone();
        ordersDaoConfig.initIdentityScope(type);

        remoteZipBeanDaoConfig = daoConfigMap.get(RemoteZipBeanDao.class).clone();
        remoteZipBeanDaoConfig.initIdentityScope(type);

        studentBeanDaoConfig = daoConfigMap.get(StudentBeanDao.class).clone();
        studentBeanDaoConfig.initIdentityScope(type);

        user1DaoConfig = daoConfigMap.get(User1Dao.class).clone();
        user1DaoConfig.initIdentityScope(type);

        user2DaoConfig = daoConfigMap.get(User2Dao.class).clone();
        user2DaoConfig.initIdentityScope(type);

        user3DaoConfig = daoConfigMap.get(User3Dao.class).clone();
        user3DaoConfig.initIdentityScope(type);

        card1Dao = new Card1Dao(card1DaoConfig, this);
        card2Dao = new Card2Dao(card2DaoConfig, this);
        eventBeanDao = new EventBeanDao(eventBeanDaoConfig, this);
        hangupBeanDao = new HangupBeanDao(hangupBeanDaoConfig, this);
        ordersDao = new OrdersDao(ordersDaoConfig, this);
        remoteZipBeanDao = new RemoteZipBeanDao(remoteZipBeanDaoConfig, this);
        studentBeanDao = new StudentBeanDao(studentBeanDaoConfig, this);
        user1Dao = new User1Dao(user1DaoConfig, this);
        user2Dao = new User2Dao(user2DaoConfig, this);
        user3Dao = new User3Dao(user3DaoConfig, this);

        registerDao(Card1.class, card1Dao);
        registerDao(Card2.class, card2Dao);
        registerDao(EventBean.class, eventBeanDao);
        registerDao(HangupBean.class, hangupBeanDao);
        registerDao(Orders.class, ordersDao);
        registerDao(RemoteZipBean.class, remoteZipBeanDao);
        registerDao(StudentBean.class, studentBeanDao);
        registerDao(User1.class, user1Dao);
        registerDao(User2.class, user2Dao);
        registerDao(User3.class, user3Dao);
    }
    
    public void clear() {
        card1DaoConfig.clearIdentityScope();
        card2DaoConfig.clearIdentityScope();
        eventBeanDaoConfig.clearIdentityScope();
        hangupBeanDaoConfig.clearIdentityScope();
        ordersDaoConfig.clearIdentityScope();
        remoteZipBeanDaoConfig.clearIdentityScope();
        studentBeanDaoConfig.clearIdentityScope();
        user1DaoConfig.clearIdentityScope();
        user2DaoConfig.clearIdentityScope();
        user3DaoConfig.clearIdentityScope();
    }

    public Card1Dao getCard1Dao() {
        return card1Dao;
    }

    public Card2Dao getCard2Dao() {
        return card2Dao;
    }

    public EventBeanDao getEventBeanDao() {
        return eventBeanDao;
    }

    public HangupBeanDao getHangupBeanDao() {
        return hangupBeanDao;
    }

    public OrdersDao getOrdersDao() {
        return ordersDao;
    }

    public RemoteZipBeanDao getRemoteZipBeanDao() {
        return remoteZipBeanDao;
    }

    public StudentBeanDao getStudentBeanDao() {
        return studentBeanDao;
    }

    public User1Dao getUser1Dao() {
        return user1Dao;
    }

    public User2Dao getUser2Dao() {
        return user2Dao;
    }

    public User3Dao getUser3Dao() {
        return user3Dao;
    }

}
