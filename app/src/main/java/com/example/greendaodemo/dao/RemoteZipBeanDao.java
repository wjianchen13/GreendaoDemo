package com.example.greendaodemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaodemo.bean.RemoteZipBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "remote_zip_bean".
*/
public class RemoteZipBeanDao extends AbstractDao<RemoteZipBean, Long> {

    public static final String TABLENAME = "remote_zip_bean";

    /**
     * Properties of entity RemoteZipBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Zid = new Property(0, long.class, "zid", true, "_id");
        public final static Property ZipDownloadSize = new Property(1, long.class, "zipDownloadSize", false, "ZIP_DOWNLOAD_SIZE");
        public final static Property ZipAllSize = new Property(2, long.class, "zipAllSize", false, "ZIP_ALL_SIZE");
        public final static Property ZipUrl = new Property(3, String.class, "zipUrl", false, "ZIP_URL");
        public final static Property ZipName = new Property(4, String.class, "zipName", false, "ZIP_NAME");
        public final static Property ZipVersion = new Property(5, int.class, "zipVersion", false, "ZIP_VERSION");
        public final static Property GameVersion = new Property(6, String.class, "gameVersion", false, "GAME_VERSION");
    }

    private DaoSession daoSession;


    public RemoteZipBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RemoteZipBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"remote_zip_bean\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: zid
                "\"ZIP_DOWNLOAD_SIZE\" INTEGER NOT NULL ," + // 1: zipDownloadSize
                "\"ZIP_ALL_SIZE\" INTEGER NOT NULL ," + // 2: zipAllSize
                "\"ZIP_URL\" TEXT," + // 3: zipUrl
                "\"ZIP_NAME\" TEXT," + // 4: zipName
                "\"ZIP_VERSION\" INTEGER NOT NULL ," + // 5: zipVersion
                "\"GAME_VERSION\" TEXT);"); // 6: gameVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"remote_zip_bean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemoteZipBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getZid());
        stmt.bindLong(2, entity.getZipDownloadSize());
        stmt.bindLong(3, entity.getZipAllSize());
 
        String zipUrl = entity.getZipUrl();
        if (zipUrl != null) {
            stmt.bindString(4, zipUrl);
        }
 
        String zipName = entity.getZipName();
        if (zipName != null) {
            stmt.bindString(5, zipName);
        }
        stmt.bindLong(6, entity.getZipVersion());
 
        String gameVersion = entity.getGameVersion();
        if (gameVersion != null) {
            stmt.bindString(7, gameVersion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemoteZipBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getZid());
        stmt.bindLong(2, entity.getZipDownloadSize());
        stmt.bindLong(3, entity.getZipAllSize());
 
        String zipUrl = entity.getZipUrl();
        if (zipUrl != null) {
            stmt.bindString(4, zipUrl);
        }
 
        String zipName = entity.getZipName();
        if (zipName != null) {
            stmt.bindString(5, zipName);
        }
        stmt.bindLong(6, entity.getZipVersion());
 
        String gameVersion = entity.getGameVersion();
        if (gameVersion != null) {
            stmt.bindString(7, gameVersion);
        }
    }

    @Override
    protected final void attachEntity(RemoteZipBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RemoteZipBean readEntity(Cursor cursor, int offset) {
        RemoteZipBean entity = new RemoteZipBean( //
            cursor.getLong(offset + 0), // zid
            cursor.getLong(offset + 1), // zipDownloadSize
            cursor.getLong(offset + 2), // zipAllSize
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zipUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zipName
            cursor.getInt(offset + 5), // zipVersion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // gameVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemoteZipBean entity, int offset) {
        entity.setZid(cursor.getLong(offset + 0));
        entity.setZipDownloadSize(cursor.getLong(offset + 1));
        entity.setZipAllSize(cursor.getLong(offset + 2));
        entity.setZipUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZipName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZipVersion(cursor.getInt(offset + 5));
        entity.setGameVersion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RemoteZipBean entity, long rowId) {
        entity.setZid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RemoteZipBean entity) {
        if(entity != null) {
            return entity.getZid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RemoteZipBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
