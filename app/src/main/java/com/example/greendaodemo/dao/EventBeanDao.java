package com.example.greendaodemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaodemo.bean.EventBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "db_event_table".
*/
public class EventBeanDao extends AbstractDao<EventBean, Void> {

    public static final String TABLENAME = "db_event_table";

    /**
     * Properties of entity EventBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, int.class, "uId", false, "U_ID");
        public final static Property EventId = new Property(1, int.class, "eventId", false, "EVENT_ID");
        public final static Property Imei = new Property(2, String.class, "imei", false, "IMEI");
        public final static Property Ctime = new Property(3, long.class, "ctime", false, "CTIME");
        public final static Property EventDesc = new Property(4, String.class, "eventDesc", false, "EVENT_DESC");
    }

    private DaoSession daoSession;


    public EventBeanDao(DaoConfig config) {
        super(config);
    }
    
    public EventBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"db_event_table\" (" + //
                "\"U_ID\" INTEGER NOT NULL ," + // 0: uId
                "\"EVENT_ID\" INTEGER NOT NULL ," + // 1: eventId
                "\"IMEI\" TEXT," + // 2: imei
                "\"CTIME\" INTEGER NOT NULL ," + // 3: ctime
                "\"EVENT_DESC\" TEXT);"); // 4: eventDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"db_event_table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUId());
        stmt.bindLong(2, entity.getEventId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(3, imei);
        }
        stmt.bindLong(4, entity.getCtime());
 
        String eventDesc = entity.getEventDesc();
        if (eventDesc != null) {
            stmt.bindString(5, eventDesc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUId());
        stmt.bindLong(2, entity.getEventId());
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(3, imei);
        }
        stmt.bindLong(4, entity.getCtime());
 
        String eventDesc = entity.getEventDesc();
        if (eventDesc != null) {
            stmt.bindString(5, eventDesc);
        }
    }

    @Override
    protected final void attachEntity(EventBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EventBean readEntity(Cursor cursor, int offset) {
        EventBean entity = new EventBean( //
            cursor.getInt(offset + 0), // uId
            cursor.getInt(offset + 1), // eventId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imei
            cursor.getLong(offset + 3), // ctime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // eventDesc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventBean entity, int offset) {
        entity.setUId(cursor.getInt(offset + 0));
        entity.setEventId(cursor.getInt(offset + 1));
        entity.setImei(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCtime(cursor.getLong(offset + 3));
        entity.setEventDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EventBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EventBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(EventBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
